# hashmap, greedy


# Greedy Sorting
from collections import Counter

class Solution:
    def minimumPushes(self, word: str) -> int:
        frequencies = [0] * 26
        for c in word:
            frequencies[ord(c) - ord('a')] += 1
        frequencies = sorted(frequencies, reverse=True)
        result = 0
        pushes = 0
        for index, frequency in enumerate(frequencies):
            if not index % 8:
                pushes += 1
            result += frequency * pushes
        return result

# Using Heap
import heapq

class Solution:
    def minimumPushes(self, word: str) -> int:
        frequencies = Counter(word)
        queue = [-frequency for frequency in frequencies.values()]
        heapq.heapify(queue)
        result = pushes = index = 0
        while queue:
            if not index % 8:
                pushes += 1
            result += pushes * -heapq.heappop(queue)
            index += 1
        return result
