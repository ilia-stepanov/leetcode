# hashtags: dynamic programming, dp

# bottom up Tabulation
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        n = len(cost)
        dp = [-1 for _ in range(n+1)]
        dp[0] = dp[1] = 0
        for ind in range(2, n+1):
            jumpOne = dp[ind-1] + cost[ind-1]
            jumpTwo = dp[ind-2] + cost[ind-2]
            dp[ind] = min(jumpOne, jumpTwo)
        return dp[n]


# top down Memoization
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        n = len(cost)
        dp = [-1 for _ in range(n+1)]
        def f(n):
            if n <= 1:
                return 0
            jumpOne = f(n-1) + cost[n-1]
            jumpTwo = f(n-2) + cost[n-2]
            dp[n] = min(jumpOne, jumpTwo)
            return dp[n]
        return f(n)

