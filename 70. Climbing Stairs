# hashtags: dynamic programming, dp


# top down Memoization
class Solution:
    def climbStairs(self, n: int) -> int:
        dp = [None] * (n + 1)

        def run_recursion(n, dp):
            if n <= 1:
                return 1
            if dp[n]:
                return dp[n]
            dp[n] = run_recursion(n-1, dp) + run_recursion(n-2, dp)
            return dp[n]

        return run_recursion(n, dp)


# bottom up Tabulation
class Solution:
    def climbStairs(self, n: int) -> int:
        dp = [None] * (n + 1)
        dp[0] = dp[1] = 1
        for i in range(2, n+1):
            dp[i] = dp[i-1] + dp[i-2]
        return dp[n]



        
